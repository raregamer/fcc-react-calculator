{"version":3,"sources":["MainButton.js","Display.js","App.js","serviceWorker.js","index.js"],"names":["MainButton","id","this","props","idName","className","value","onClick","action","innerName","React","Component","Display","currentValue","currentInput","App","state","hasDecimal","isOperator","isNegative","isNewCalculation","hasTwoOperators","totaled","handleChange","bind","clearState","handleCalculateTotal","precedenceChecker","operatorCheck","checkForDecimal","operator","setState","event","target","operatorChangeValue","substring","length","lastInput","console","log","currentStateValue","isNaN","parseFloat","continueAfterTotal","currentInputTotal","regEx","RegExp","currentValues","split","push","userTokenStack","operatorStack","outputStack","forEach","token","undefined","operatorTokens","outputTokens","lastOperator","pop","reverse","finalNumber","leftOperand","rightOperand","currentTokens","numberValues","totalValue","i","toFixed","Number","toString","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d34d1f66.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass MainButton extends React.Component{\r\n\r\n\r\n    render(){\r\n        return(\r\n            <button id = {this.props.idName} className =\"main-button\" value= {this.props.value} onClick = {this.props.action}>\r\n                {this.props.innerName}\r\n            </button>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MainButton;","import React from 'react';\r\n\r\nclass Display extends React.Component{\r\n    \r\n    render(){\r\n        return(\r\n            <div className = \"display-container\">\r\n            <div className=\"display-split\">\r\n            <h3 id = \"current-equation\">{this.props.currentValue}</h3>\r\n            <h2 id=\"display\">{this.props.currentInput}</h2>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\nimport './App.css';\r\nimport MainButton from './MainButton';\r\nimport Display from './Display';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentValue: '0',\r\n      currentInput: '0',\r\n      hasDecimal: false,\r\n      isOperator: false,\r\n      isNegative: false,\r\n      isNewCalculation: true,\r\n      hasTwoOperators: false,\r\n      totaled: false,\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.clearState = this.clearState.bind(this);\r\n    this.handleCalculateTotal = this.handleCalculateTotal.bind(this);\r\n    this.precedenceChecker = this.precedenceChecker.bind(this);\r\n    this.operatorCheck = this.operatorCheck.bind(this);\r\n    this.checkForDecimal = this.checkForDecimal.bind(this);\r\n    this.operator = this.operator.bind(this);\r\n  }\r\n\r\n  checkForDecimal(currentValue) {\r\n    switch (currentValue) {\r\n      case '.':\r\n        this.setState({\r\n          hasDecimal: true\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  operatorCheck(currentValue) {\r\n    switch (currentValue) {\r\n      case '+':\r\n      case '-':\r\n        this.setState({\r\n          isOperator: true,\r\n          hasDecimal: false,\r\n        });\r\n        break;\r\n      case 'x':\r\n      case '/':\r\n        this.setState({\r\n          isOperator: true,\r\n          hasDecimal: false,\r\n          isNegative: false\r\n        });\r\n        break;\r\n      default:\r\n        this.setState({\r\n          isOperator: false,\r\n        });\r\n        break;\r\n    }\r\n  }\r\n\r\n  //check if value is an operator.\r\n  operator(value) {\r\n    switch (value) {\r\n      case '+':\r\n      case '-':\r\n      case 'x':\r\n      case '/':\r\n        return 1;\r\n      default:\r\n        return -1;\r\n    }\r\n  };\r\n\r\n\r\n\r\n  precedenceChecker(operator) {\r\n    switch (operator) {\r\n      case '+':\r\n      case '-':\r\n        return 0;\r\n      case 'x':\r\n      case '/':\r\n        return 1;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  async handleChange(event) {\r\n    let value = event.target.value;\r\n    //check if decimal in place\r\n    this.checkForDecimal(value);\r\n    if(this.state.hasDecimal && value === '.'){\r\n      return;\r\n    }\r\n    if(this.operator(value) === 1){\r\n      this.setState({\r\n        hasDecimal: false\r\n      });\r\n    }\r\n\r\n\r\n    //if more than two operators in a row, change to the current operator inputed. \r\n    if(this.operator(value) === 1 && this.state.hasTwoOperators){\r\n      let operatorChangeValue =  this.state.currentValue.substring(0, this.state.currentValue.length-2) + value;  \r\n        this.setState({\r\n          currentValue: operatorChangeValue,\r\n        });\r\n        return;\r\n      }else if(this.operator(value) === -1 && this.state.hasTwoOperators){\r\n        this.setState({\r\n          hasTwoOperators: false\r\n        });\r\n      }\r\n    \r\n    //check if current input value is an operator. \r\n    let lastInput = this.state.currentValue[this.state.currentValue.length -1];\r\n    //check if last input and current input operator and update them if they are.\r\n    if(this.operator(value) === 1 && this.operator(lastInput) === 1){\r\n      console.log('true operator');\r\n      let currentStateValue = this.state.currentValue;\r\n      \r\n      if(value === '-' && lastInput !== \r\n      '-'){\r\n        this.setState({\r\n          currentValue: currentStateValue + value,\r\n          hasTwoOperators: true\r\n        });\r\n        //check last 2 inputs if operator\r\n    \r\n      }else{\r\n        let operatorChangeValue =  currentStateValue.substring(0, currentStateValue.length-1) + value;  \r\n        this.setState({\r\n          currentValue: operatorChangeValue,\r\n        });\r\n      }\r\n      return;\r\n    }\r\n//if negative first value inputed. \r\n    if(lastInput === '-' && !isNaN(value)){\r\n      this.setState({\r\n        currentValue: this.state.currentValue + value,\r\n        isNewCalculation: false\r\n      })\r\n      return;\r\n    }\r\n\r\n// Operator check end \r\n\r\n    //Handles multiple 0 case #10\r\n    if(value === '0' && this.state.currentValue[0] === '0' && !this.state.hasDecimal || value === '0' && isNaN(this.state.currentValue[this.state.currentValue.length -1]) && !this.state.hasDecimal ){\r\n      return;\r\n    }\r\n\r\n    //Check if we should be starting a new calculation or using previous value after totalted. \r\n    if(this.state.totaled && isNaN(parseFloat(value)) && !this.state.continueAfterTotal){\r\n       this.setState({\r\n        'isNewCalculation': false,\r\n        'totaled': false,\r\n        'continueAfterTotal': true\r\n      });\r\n    };\r\n\r\n      if(this.operator(value) === -1){\r\n      let currentInputTotal = this.state.currentInput === '0' || isNaN(this.state.currentInput)? value : this.state.currentInput + value;\r\n      this.setState({\r\n        currentInput: currentInputTotal\r\n      });\r\n    }else{\r\n      this.setState({\r\n        currentInput: value\r\n      });\r\n    };\r\n    //if an opperator is pressed, use previous total to calculate, else start new calculation at 0.\r\n    if(this.state.isNewCalculation && isNaN(value)){\r\n         this.setState({\r\n          'currentValue': this.state.currentValue + value \r\n        });\r\n    }else if(this.state.isNewCalculation && !isNaN(value)){\r\n       this.setState({\r\n        'currentValue': value,\r\n        'currentInput' : value,\r\n        'isNewCalculation': false\r\n      });\r\n    } else{\r\n       this.setState({\r\n        'currentValue': this.state.currentValue + value,\r\n      });\r\n    }\r\n    \r\n  };\r\n\r\n  // Using the The Shunting Yard Algorithm to calculate\r\n   handleCalculateTotal() {\r\n    //NEED TO MAKE STATE CHANGE ONLY ONCE!!!\r\n    \r\n        //1st step take current values and split them into a user token stack \r\n        let regEx = new RegExp(/((?<![x/\\-+])-|[x/+])/);\r\n        let currentValues =[];\r\n        if(this.state.currentValue.length > 0){\r\n         currentValues =  this.state.currentValue.split(regEx);\r\n        } else{\r\n          currentValues.push(this.state.currentValue);\r\n        }\r\n        console.log(currentValues)\r\n        //spread currentvalues array into a token stack\r\n        let userTokenStack = [...currentValues];\r\n        //setup operator stack and outputstack\r\n        let operatorStack = [];\r\n        let outputStack = [];\r\n    \r\n        //2nd step go through token stack and split into an output and operator stack\r\n         userTokenStack.forEach(token => {\r\n          let value = parseFloat(token);\r\n          //if token not a number it must be an operator.\r\n          if (isNaN(value)) {\r\n            //if no operators are in the stack yet add the first operator.\r\n            if (operatorStack === undefined || operatorStack.length === 0) {\r\n                operatorStack.push(token);\r\n            }\r\n            else {\r\n              //make a copy of the current operator tokens. \r\n              let operatorTokens = [...operatorStack];\r\n              //make a copy of the output stack.\r\n              let outputTokens = [...outputStack];\r\n              //get the last output operator to compare with the next operator.\r\n              let lastOperator = operatorTokens.pop();\r\n    \r\n              //if current operator token greater than the last token operator\r\n              if (this.precedenceChecker(token) <= this.precedenceChecker(lastOperator)) {\r\n                // take the last operator token and push it to the output token stack.\r\n                outputTokens.push(lastOperator);\r\n                // take current token and push it to the operator stack.\r\n                operatorTokens.push(token);\r\n                  operatorStack = [...operatorTokens];\r\n                  outputStack = [...outputTokens];\r\n    \r\n                //ELSE push the token to the operator token stack.\r\n              } else {\r\n    \r\n                 operatorTokens.push(lastOperator, token);\r\n                  operatorStack = [...operatorTokens];\r\n              }\r\n            }\r\n    \r\n            //add token which is number to output stack.\r\n          } else {\r\n              outputStack = [...outputStack, token];\r\n          }\r\n    \r\n        });\r\n    \r\n        //3rd merge the output stack first then the operator stack. \r\n          outputStack =  [...outputStack, ...operatorStack.reverse()];\r\n    \r\n        console.log(\"final order: \" + this.state.outputStack);\r\n        //postfix calculator algorithm\r\n        //4th check if tokens are on the output stack\r\n        let leftOperand = null;\r\n        let rightOperand = null;\r\n        let currentTokens = [...outputStack];\r\n        let numberValues = [];\r\n        let totalValue = null;\r\n    \r\n        for (var i = 0; i < currentTokens.length; i++) {\r\n          if (isNaN(currentTokens[i])) {\r\n            console.log(\"in here also: \" + currentTokens[i]);\r\n            rightOperand = numberValues.pop();\r\n            leftOperand = numberValues.pop();\r\n            switch (currentTokens[i]) {\r\n              case '+':\r\n                totalValue = leftOperand + rightOperand;\r\n                break;\r\n              case '-':\r\n                totalValue = leftOperand - rightOperand;\r\n                break;\r\n              case 'x':\r\n                totalValue = leftOperand * rightOperand;\r\n                break;\r\n              case '/':\r\n                totalValue = leftOperand / rightOperand;\r\n                break;\r\n    \r\n              default:\r\n                break;\r\n    \r\n            }\r\n             numberValues.push(totalValue);\r\n    \r\n    \r\n    \r\n          } else {\r\n             numberValues.push(parseFloat(currentTokens[i]));\r\n          }\r\n    \r\n        }\r\n        if (numberValues[0] === null) {\r\n          numberValues[0] = 0;\r\n    \r\n        }\r\n        let finalNumber;\r\n        if (numberValues[0] % 1 === 0) {\r\n          finalNumber = numberValues[0].toFixed(0);\r\n        } else {\r\n          finalNumber =  Number(numberValues[0].toFixed(4));\r\n        }\r\n        this.clearState();\r\n        this.setState({\r\n          currentValue: finalNumber.toString(),\r\n          currentInput:finalNumber.toString(),\r\n          totaled: true\r\n        });\r\n    \r\n      };\r\n\r\n   clearState() {\r\n     this.setState({\r\n      currentValue: '0',\r\n      currentInput: '0',\r\n      userTokenStack: [],\r\n      operatorStack: [],\r\n      outputStack: [],\r\n      hasDecimal: false,\r\n      isOperator: false,\r\n      isNegative: false,\r\n      isNewCalculation: true,\r\n      totaled: false,\r\n      continueAfterTotal: false,\r\n    })\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"calculator\">\r\n        <div className=\"grid-container\">\r\n          <Display currentValue={this.state.currentValue} currentInput={this.state.currentInput}></Display>\r\n          <MainButton idName=\"clear\" innerName='AC' action={this.clearState}></MainButton>\r\n          <MainButton idName=\"one\" innerName='1' value='1' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"two\" innerName='2' value='2' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"three\" innerName='3' value='3' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"four\" innerName='4' value='4' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"five\" innerName='5' value='5' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"six\" innerName='6' value='6' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"seven\" innerName='7' value='7' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"eight\" innerName='8' value='8' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"nine\" innerName='9' value='9' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"zero\" innerName='0' value='0' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"add\" innerName='+' value='+' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"subtract\" innerName='-' value='-' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"multiply\" innerName='X' value='x' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"divide\" innerName='/' value='/' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"equals\" innerName='=' value='=' action={this.handleCalculateTotal}></MainButton>\r\n          <MainButton idName=\"decimal\" value='.' innerName='.' action={this.handleChange}></MainButton>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}