{"version":3,"sources":["MainButton.js","Display.js","App.js","serviceWorker.js","index.js"],"names":["MainButton","id","this","props","idName","className","value","onClick","action","innerName","React","Component","Display","currentValue","userTokenStack","App","state","operatorStack","outputStack","hasDecimal","isOperator","isNegative","total","handleChange","bind","clearState","handleCalculateTotal","precedenceChecker","previousOperatorCheck","checkForNegativeNumber","checkForDecimal","operator","setState","currentInput","parseFloat","lastCharInput","length","console","log","isNaN","currentStateValue","newStateValue","substring","event","target","lastOperator","charAt","operatorChangeValue","split","currentValues","filter","item","i","convertNumberAfter","splice","forEach","token","undefined","operatorTokens","outputTokens","pop","push","reverse","leftOperand","rightOperand","currentTokens","numberValues","totalValue","finalNumber","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b212061.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass MainButton extends React.Component{\r\n\r\n\r\n    render(){\r\n        return(\r\n            <button id = {this.props.idName} className =\"main-button\" value= {this.props.value} onClick = {this.props.action}>\r\n                {this.props.innerName}\r\n            </button>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MainButton;","import React from 'react';\r\n\r\nclass Display extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className = \"display-container\">\r\n            <h1 id = \"display\" >{this.props.currentValue} </h1>\r\n            <h2> {this.props.userTokenStack}</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\nimport './App.css';\r\nimport MainButton from './MainButton';\r\nimport Display from './Display';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentValue: '0',\r\n      userTokenStack: [],\r\n      operatorStack: [],\r\n      outputStack: [],\r\n      hasDecimal: false,\r\n      isOperator: false,\r\n      isNegative: false,\r\n      total: null,\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.clearState = this.clearState.bind(this);\r\n    this.handleCalculateTotal = this.handleCalculateTotal.bind(this);\r\n    this.precedenceChecker = this.precedenceChecker.bind(this);\r\n    this.previousOperatorCheck = this.previousOperatorCheck.bind(this);\r\n    this.checkForNegativeNumber = this.checkForNegativeNumber.bind(this);\r\n    this.checkForDecimal = this.checkForDecimal.bind(this);\r\n    this.operator = this.operator.bind(this);\r\n  }\r\n\r\n  checkForDecimal(currentValue) {\r\n    switch (currentValue) {\r\n      case '.':\r\n        this.setState({\r\n          hasDecimal: true\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  previousOperatorCheck(currentValue) {\r\n    switch (currentValue) {\r\n      case ' + ':\r\n      case ' - ':\r\n        this.setState({\r\n          isOperator: true,\r\n          hasDecimal: false,\r\n        });\r\n        break;\r\n      case ' x ':\r\n      case ' / ':\r\n        this.setState({\r\n          isOperator: true,\r\n          hasDecimal: false,\r\n          isNegative: false\r\n        });\r\n        break;\r\n      default:\r\n        this.setState({\r\n          isOperator: false,\r\n        });\r\n        break;\r\n    }\r\n  }\r\n  //check if value is an operator.\r\n  operator(value) {\r\n    switch (value) {\r\n      case ' + ':\r\n      case ' - ':\r\n      case ' x ':\r\n      case ' /':\r\n        return 1;\r\n      default:\r\n        return -1;\r\n    }\r\n  };\r\n\r\n\r\n  checkForNegativeNumber(currentValue) {\r\n    // if current value a number and previous value a negative replace with -currentvalue number\r\n    let currentInput = parseFloat(currentValue);\r\n    let lastCharInput = (this.state.currentValue[this.state.currentValue.length - 3]);\r\n    console.log(lastCharInput + ' current: ' + currentValue);\r\n    if (!isNaN(currentInput) && lastCharInput === '-') {\r\n      console.log(\"made it\")\r\n      currentInput = '-' + currentInput;\r\n      console.log(currentInput);\r\n      console.log(this.state.currentValue);\r\n      let currentStateValue = this.state.currentValue;\r\n      let newStateValue = currentStateValue.substring(0, currentStateValue.length - 4) + currentInput;\r\n      this.setState({\r\n        currentValue: newStateValue\r\n      });\r\n      console.log(this.state.currentValue);\r\n\r\n    }\r\n  }\r\n\r\n  precedenceChecker(operator) {\r\n    switch (operator) {\r\n      case '+':\r\n      case '-':\r\n        return 0;\r\n      case 'x':\r\n      case '/':\r\n        return 1;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  async handleChange(event) {\r\n    console.log(this.state.hasDecimal);\r\n    let value = event.target.value;\r\n\r\n    //Phase 1 check to see if first input is operator if it is use 0 as the current value. Else if a number set value to current number else concatenate the last number to current value.\r\n    //check if number already contains a decimal. Also check if currently an opperator. Used to prevent multiple operators chained together.\r\n    if ((this.state.hasDecimal && value === '.') || (this.state.isOperator && isNaN(value))) {\r\n      let lastOperator = this.state.currentValue.charAt(this.state.currentValue.length - 2);\r\n      //allow a negative to be put after an operator. \r\n      if (value === ' - ' && lastOperator !== '-') {\r\n        this.setState({\r\n          currentValue: this.state.currentValue + value\r\n        });\r\n      }\r\n\r\n      //change current operator if operator clicked after current operator\r\n      else if (this.state.isOperator && this.operator(value) && value !== '.') {\r\n        let currentStateValue = this.state.currentValue;\r\n        let operatorChangeValue = currentStateValue.substring(0, currentStateValue.length - 2) + value;\r\n        this.setState({\r\n          currentValue: operatorChangeValue\r\n        });\r\n      }\r\n      //allow a decimal operand after an operator\r\n      if (!this.state.hasDecimal && this.state.isOperator && value === '.') {\r\n        this.setState({\r\n          currentValue: this.state.currentValue + value,\r\n          hasDecimal: true\r\n        });\r\n      };\r\n      return\r\n    };\r\n\r\n\r\n\r\n\r\n    if (this.state.currentValue === '0' && this.state.isOperator) {\r\n      this.setState({\r\n        currentValue: this.state.currentValue + value\r\n      });\r\n    } else if (this.state.currentValue === '0') {\r\n      this.setState({ currentValue: value });\r\n    } else {\r\n      this.setState({ currentValue: this.state.currentValue + value })\r\n    };\r\n\r\n    //end phase 1\r\n    // assign boolean if operator\r\n    await this.previousOperatorCheck(value);\r\n\r\n    //assign boolean if decimal.\r\n    await this.checkForDecimal(value);\r\n  }\r\n\r\n  // Using the The Shunting Yard Algorithm to calculate\r\n  async handleCalculateTotal() {\r\n\r\n    console.log(\"handle calc: \" + this.state.currentValue)\r\n\r\n    //1st step take current values and split them into a user token stack \r\n    let currentValues = await this.state.currentValue.split(' ');\r\n    //Get rid of empty spaces in array.\r\n    currentValues = await currentValues.filter((item) => {\r\n      return item !== '';\r\n    });\r\n    //Convert numbers to negative values if a negative operator prior to number and value before operator not a number.\r\n    for (let i = 0; i < currentValues.length; i++) {\r\n      if (currentValues[i] === '-' && isNaN(currentValues[i - 1])) {\r\n        let convertNumberAfter = \"-\" + currentValues[i + 1];\r\n        currentValues[i + 1] = convertNumberAfter;\r\n        currentValues.splice(i, 1);\r\n      };\r\n    };\r\n    this.setState({\r\n      userTokenStack: await [...this.state.userTokenStack, ...currentValues],\r\n    });\r\n    //2nd step go through token stack and split into an output and operator stack\r\n    console.log(\"pre tokenstack \" + this.state.userTokenStack);\r\n    this.state.userTokenStack.forEach(token => {\r\n      let value = parseFloat(token);\r\n      //if token not a number it must be an operator.\r\n      if (isNaN(value)) {\r\n\r\n        //if no operators are in the stack yet add the first operator.\r\n        if (this.state.operatorStack === undefined || this.state.operatorStack.length === 0) {\r\n          this.setState({\r\n            operatorStack: [...this.state.operatorStack, token]\r\n          });\r\n        }\r\n        else {\r\n          //make a copy of the current operator tokens. \r\n          let operatorTokens = [...this.state.operatorStack];\r\n          //make a copy of the output stack.\r\n          let outputTokens = [...this.state.outputStack];\r\n          //get the last output operator to compare with the next operator.\r\n          let lastOperator = operatorTokens.pop();\r\n\r\n          //if current operator token greater than the last token operator\r\n          if (this.precedenceChecker(token) <= this.precedenceChecker(lastOperator)) {\r\n            // take the last operator token and push it to the output token stack.\r\n            outputTokens.push(lastOperator);\r\n            // take current token and push it to the operator stack.\r\n            operatorTokens.push(token);\r\n            this.setState({\r\n              operatorStack: [...operatorTokens],\r\n              outputStack: [...outputTokens]\r\n            });\r\n\r\n            //ELSE push the token to the operator token stack.\r\n          } else {\r\n\r\n            operatorTokens.push(lastOperator, token);\r\n            this.setState({\r\n              operatorStack: [...operatorTokens],\r\n            });\r\n\r\n          }\r\n        }\r\n\r\n        //add token which is number to output stack.\r\n      } else {\r\n        this.setState({\r\n          outputStack: [...this.state.outputStack, token]\r\n        });\r\n      }\r\n\r\n    });\r\n    //3rd merge the output stack first then the operator stack. \r\n    this.setState({\r\n      outputStack: [...this.state.outputStack, ...this.state.operatorStack.reverse()]\r\n    });\r\n\r\n    console.log(\"final order: \" + this.state.outputStack);\r\n    //postfix calculator algorithm\r\n    //4th check if tokens are on the output stack\r\n    let leftOperand = null;\r\n    let rightOperand = null;\r\n    let currentTokens = [...this.state.outputStack];\r\n    let numberValues = [];\r\n    let totalValue = null;\r\n\r\n    for (var i = 0; i < currentTokens.length; i++) {\r\n      console.log(i);\r\n      console.log(numberValues);\r\n      if (isNaN(currentTokens[i])) {\r\n        console.log(\"in here also: \" + currentTokens[i]);\r\n        rightOperand = numberValues.pop();\r\n        leftOperand = numberValues.pop();\r\n        switch (currentTokens[i]) {\r\n          case '+':\r\n            totalValue = leftOperand + rightOperand;\r\n            break;\r\n          case '-':\r\n            totalValue = leftOperand - rightOperand;\r\n            break;\r\n          case 'x':\r\n            totalValue = leftOperand * rightOperand;\r\n            break;\r\n          case '/':\r\n            totalValue = leftOperand / rightOperand;\r\n            break;\r\n\r\n          default:\r\n            break;\r\n\r\n        }\r\n        numberValues.push(totalValue);\r\n\r\n\r\n\r\n      } else {\r\n        console.log(\"number: \" + (currentTokens[i]));\r\n        numberValues.push(parseFloat(currentTokens[i]));\r\n      }\r\n\r\n    }\r\n    console.log(' modulu: ' + numberValues[0]);\r\n    if (numberValues[0] === null) {\r\n      numberValues[0] = 0;\r\n\r\n    }\r\n    let finalNumber;\r\n    if (numberValues[0] % 1 === 0) {\r\n      finalNumber = numberValues[0].toFixed(0);\r\n    } else {\r\n      finalNumber = numberValues[0].toFixed(4)\r\n    }\r\n    this.clearState();\r\n    this.setState({\r\n      currentValue: finalNumber\r\n    });\r\n\r\n  }\r\n\r\n  clearState() {\r\n    this.setState({\r\n      currentValue: '0',\r\n      userTokenStack: [],\r\n      operatorStack: [],\r\n      outputStack: [],\r\n      hasDecimal: false,\r\n      isOperator: false,\r\n      isNegative: false,\r\n      total: null,\r\n    })\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"calculator\">\r\n        <div className=\"grid-container\">\r\n          <Display currentValue={this.state.currentValue} userTokenStack={this.state.userTokenStack} total={this.state.total}></Display>\r\n          <MainButton idName=\"clear\" innerName='AC' action={this.clearState}></MainButton>\r\n          <MainButton idName=\"one\" innerName='1' value='1' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"two\" innerName='2' value='2' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"three\" innerName='3' value='3' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"four\" innerName='4' value='4' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"five\" innerName='5' value='5' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"six\" innerName='6' value='6' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"seven\" innerName='7' value='7' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"eight\" innerName='8' value='8' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"nine\" innerName='9' value='9' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"zero\" innerName='0' value='0' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"add\" innerName='+' value=' + ' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"subtract\" innerName='-' value=' - ' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"multiply\" innerName='X' value=' x ' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"divide\" innerName='/' value=' / ' action={this.handleChange}></MainButton>\r\n          <MainButton idName=\"equals\" innerName='=' value=' = ' action={this.handleCalculateTotal}></MainButton>\r\n          <MainButton idName=\"decimal\" value='.' innerName='.' action={this.handleChange}></MainButton>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}